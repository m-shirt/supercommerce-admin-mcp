{
  "version": 3,
  "sources": ["../../widgets/src/order-list.tsx", "../../widgets/hooks/useOpenAiGlobal.ts", "../../widgets/hooks/useWidgetState.ts"],
  "sourcesContent": ["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { useOpenAiGlobal } from '../hooks';\n\ninterface Order {\n  id: string;\n  customer: string;\n  total: number;\n  items: number;\n  status: string;\n  date: string;\n}\n\nfunction OrderList() {\n  // Get data from tool invocation\n  const toolInput = (window as any).openai?.toolInput;\n  const apiResponse = toolInput || {};\n  const orders: Order[] = apiResponse?.data?.orders || apiResponse?.orders || [];\n\n  const displayMode = useOpenAiGlobal('displayMode');\n\n  const [searchQuery, setSearchQuery] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n\n  const filteredOrders = orders.filter(order => {\n    const matchesSearch = order.id.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         order.customer.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesStatus = statusFilter === 'all' || order.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  });\n\n  const handleViewOrder = (orderId: string) => {\n    (window as any).openai?.sendMessage(`View order ${orderId}`);\n  };\n\n  const getStatusColor = (status: string) => {\n    const colors: Record<string, { bg: string; text: string }> = {\n      pending: { bg: '#fef3c7', text: '#92400e' },\n      processing: { bg: '#dbeafe', text: '#1e40af' },\n      shipped: { bg: '#e0e7ff', text: '#4338ca' },\n      delivered: { bg: '#d1fae5', text: '#065f46' },\n      cancelled: { bg: '#fee2e2', text: '#991b1b' }\n    };\n    return colors[status] || { bg: '#f3f4f6', text: '#1f2937' };\n  };\n\n  const statusCounts = {\n    all: orders.length,\n    pending: orders.filter(o => o.status === 'pending').length,\n    processing: orders.filter(o => o.status === 'processing').length,\n    shipped: orders.filter(o => o.status === 'shipped').length,\n    delivered: orders.filter(o => o.status === 'delivered').length,\n    cancelled: orders.filter(o => o.status === 'cancelled').length\n  };\n\n  return (\n    <div className={`order-list-container ${displayMode}`}>\n      <style>{`\n        .order-list-container {\n          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n          padding: 1.5rem;\n          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n          min-height: 100vh;\n        }\n\n        .order-header {\n          margin-bottom: 1.5rem;\n        }\n\n        .order-title {\n          color: white;\n          font-size: 2rem;\n          font-weight: 700;\n          margin: 0 0 0.5rem 0;\n        }\n\n        .order-subtitle {\n          color: rgba(255, 255, 255, 0.9);\n          font-size: 1rem;\n        }\n\n        .filters {\n          background: white;\n          border-radius: 12px;\n          padding: 1.5rem;\n          margin-bottom: 1.5rem;\n          box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n        }\n\n        .search-bar {\n          margin-bottom: 1rem;\n        }\n\n        .search-input {\n          width: 50%;\n          padding: 0.75rem 1rem;\n          border: 2px solid #e5e7eb;\n          border-radius: 8px;\n          font-size: 1rem;\n        }\n\n        .search-input:focus {\n          outline: none;\n          border-color: #667eea;\n        }\n\n        .status-filters {\n          display: flex;\n          gap: 0.5rem;\n          flex-wrap: wrap;\n        }\n\n        .filter-btn {\n          padding: 0.5rem 1rem;\n          border: 2px solid #e5e7eb;\n          background: white;\n          border-radius: 8px;\n          font-size: 0.875rem;\n          font-weight: 600;\n          cursor: pointer;\n          transition: all 0.2s;\n          display: flex;\n          align-items: center;\n          gap: 0.5rem;\n        }\n\n        .filter-btn:hover {\n          border-color: #667eea;\n        }\n\n        .filter-btn.active {\n          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n          color: white;\n          border-color: transparent;\n        }\n\n        .filter-count {\n          background: rgba(0, 0, 0, 0.1);\n          padding: 0.125rem 0.5rem;\n          border-radius: 12px;\n          font-size: 0.75rem;\n        }\n\n        .filter-btn.active .filter-count {\n          background: rgba(255, 255, 255, 0.2);\n        }\n\n        .orders-grid {\n          display: grid;\n          grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n          gap: 1rem;\n        }\n\n        .order-card {\n          background: white;\n          border-radius: 12px;\n          padding: 1.5rem;\n          box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n          transition: transform 0.2s, box-shadow 0.2s;\n          cursor: pointer;\n        }\n\n        .order-card:hover {\n          transform: translateY(-4px);\n          box-shadow: 0 12px 24px rgba(0, 0, 0, 0.15);\n        }\n\n        .order-card-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: flex-start;\n          margin-bottom: 1rem;\n        }\n\n        .order-id {\n          font-size: 1.125rem;\n          font-weight: 700;\n          color: #1f2937;\n          margin: 0;\n        }\n\n        .order-status {\n          display: inline-block;\n          padding: 0.25rem 0.75rem;\n          border-radius: 12px;\n          font-size: 0.75rem;\n          font-weight: 600;\n          text-transform: capitalize;\n        }\n\n        .order-info {\n          display: flex;\n          flex-direction: column;\n          gap: 0.5rem;\n          margin-bottom: 1rem;\n        }\n\n        .info-row {\n          display: flex;\n          justify-content: space-between;\n          font-size: 0.875rem;\n        }\n\n        .info-label {\n          color: #6b7280;\n        }\n\n        .info-value {\n          font-weight: 600;\n          color: #1f2937;\n        }\n\n        .order-total {\n          font-size: 1.5rem;\n          font-weight: 700;\n          color: #667eea;\n        }\n\n        .view-btn {\n          width: 100%;\n          padding: 0.75rem;\n          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n          color: white;\n          border: none;\n          border-radius: 8px;\n          font-size: 0.875rem;\n          font-weight: 600;\n          cursor: pointer;\n          transition: opacity 0.2s;\n        }\n\n        .view-btn:hover {\n          opacity: 0.9;\n        }\n\n        .empty-state {\n          background: white;\n          border-radius: 12px;\n          padding: 4rem 2rem;\n          text-align: center;\n          box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n        }\n\n        .empty-icon {\n          font-size: 4rem;\n          margin-bottom: 1rem;\n        }\n\n        .empty-state h2 {\n          color: #1f2937;\n          margin-bottom: 0.5rem;\n        }\n\n        .empty-state p {\n          color: #6b7280;\n        }\n\n        @media (max-width: 768px) {\n          .orders-grid {\n            grid-template-columns: 1fr;\n          }\n        }\n      `}</style>\n\n      <div className=\"order-header\">\n        <h1 className=\"order-title\">Orders</h1>\n        <p className=\"order-subtitle\">{orders.length} total orders</p>\n      </div>\n\n      <div className=\"filters\">\n        <div className=\"search-bar\">\n          <input\n            type=\"text\"\n            className=\"search-input\"\n            placeholder=\"Search by order ID or customer name...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n          />\n        </div>\n        <div className=\"status-filters\">\n          <button\n            className={`filter-btn ${statusFilter === 'all' ? 'active' : ''}`}\n            onClick={() => setStatusFilter('all')}\n          >\n            All Orders\n            <span className=\"filter-count\">{statusCounts.all}</span>\n          </button>\n          <button\n            className={`filter-btn ${statusFilter === 'pending' ? 'active' : ''}`}\n            onClick={() => setStatusFilter('pending')}\n          >\n            Pending\n            <span className=\"filter-count\">{statusCounts.pending}</span>\n          </button>\n          <button\n            className={`filter-btn ${statusFilter === 'processing' ? 'active' : ''}`}\n            onClick={() => setStatusFilter('processing')}\n          >\n            Processing\n            <span className=\"filter-count\">{statusCounts.processing}</span>\n          </button>\n          <button\n            className={`filter-btn ${statusFilter === 'shipped' ? 'active' : ''}`}\n            onClick={() => setStatusFilter('shipped')}\n          >\n            Shipped\n            <span className=\"filter-count\">{statusCounts.shipped}</span>\n          </button>\n          <button\n            className={`filter-btn ${statusFilter === 'delivered' ? 'active' : ''}`}\n            onClick={() => setStatusFilter('delivered')}\n          >\n            Delivered\n            <span className=\"filter-count\">{statusCounts.delivered}</span>\n          </button>\n          <button\n            className={`filter-btn ${statusFilter === 'cancelled' ? 'active' : ''}`}\n            onClick={() => setStatusFilter('cancelled')}\n          >\n            Cancelled\n            <span className=\"filter-count\">{statusCounts.cancelled}</span>\n          </button>\n        </div>\n      </div>\n\n      {filteredOrders.length === 0 ? (\n        <div className=\"empty-state\">\n          <div className=\"empty-icon\">\uD83D\uDCE6</div>\n          <h2>No orders found</h2>\n          <p>Try adjusting your search or filters</p>\n        </div>\n      ) : (\n        <div className=\"orders-grid\">\n          {filteredOrders.map((order) => {\n            const statusColor = getStatusColor(order.status);\n            return (\n              <div key={order.id} className=\"order-card\" onClick={() => handleViewOrder(order.id)}>\n                <div className=\"order-card-header\">\n                  <h3 className=\"order-id\">{order.id}</h3>\n                  <span\n                    className=\"order-status\"\n                    style={{ backgroundColor: statusColor.bg, color: statusColor.text }}\n                  >\n                    {order.status}\n                  </span>\n                </div>\n                <div className=\"order-info\">\n                  <div className=\"info-row\">\n                    <span className=\"info-label\">Customer</span>\n                    <span className=\"info-value\">{order.customer}</span>\n                  </div>\n                  <div className=\"info-row\">\n                    <span className=\"info-label\">Items</span>\n                    <span className=\"info-value\">{order.items}</span>\n                  </div>\n                  <div className=\"info-row\">\n                    <span className=\"info-label\">Date</span>\n                    <span className=\"info-value\">{order.date}</span>\n                  </div>\n                  <div className=\"info-row\">\n                    <span className=\"info-label\">Total</span>\n                    <span className=\"order-total\">${order.total.toFixed(2)}</span>\n                  </div>\n                </div>\n                <button className=\"view-btn\">View Details</button>\n              </div>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n}\n\n// Mount widget\nconst root = document.getElementById('order-list-root');\nif (root) {\n  ReactDOM.createRoot(root).render(<OrderList />);\n}\n", "import { useEffect, useState } from 'react';\n\n/**\n * Hook to access the OpenAI Apps SDK global API\n * Provides access to window.openai for tool calls, state, and messaging\n */\nexport function useOpenAiGlobal() {\n  const [openai, setOpenai] = useState<any>(null);\n\n  useEffect(() => {\n    if (typeof window !== 'undefined' && (window as any).openai) {\n      setOpenai((window as any).openai);\n    }\n  }, []);\n\n  return openai;\n}\n", "import { useState, useEffect } from 'react';\nimport { useOpenAiGlobal } from './useOpenAiGlobal';\n\n/**\n * Hook for managing widget state with OpenAI Apps SDK\n * Provides persistent state management under 4k token limit\n *\n * @param initialState - Initial state object\n * @returns [state, setState] tuple similar to useState\n */\nexport function useWidgetState<T>(initialState: T) {\n  const openai = useOpenAiGlobal();\n  const [state, setStateInternal] = useState<T>(initialState);\n\n  // Load persisted state on mount\n  useEffect(() => {\n    if (openai?.widgetState) {\n      const savedState = openai.widgetState.get();\n      if (savedState && Object.keys(savedState).length > 0) {\n        setStateInternal({ ...initialState, ...savedState });\n      }\n    }\n  }, [openai]);\n\n  // Persist state on change\n  const setState = (updates: Partial<T> | ((prev: T) => Partial<T>)) => {\n    setStateInternal(prev => {\n      const updatesToApply = typeof updates === 'function' ? updates(prev) : updates;\n      const newState = { ...prev, ...updatesToApply };\n\n      // Persist to OpenAI widget state\n      if (openai?.widgetState) {\n        openai.widgetState.set(newState);\n      }\n\n      return newState;\n    });\n  };\n\n  return [state, setState] as const;\n}\n"],
  "mappings": "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",
  "names": ["useState", "ReactDOM", "useEffect", "useState", "useOpenAiGlobal", "openai", "setOpenai", "useState", "useEffect", "jsx", "jsxs", "OrderList", "apiResponse", "orders", "displayMode", "useOpenAiGlobal", "searchQuery", "setSearchQuery", "useState", "statusFilter", "setStatusFilter", "filteredOrders", "order", "matchesSearch", "matchesStatus", "handleViewOrder", "orderId", "getStatusColor", "status", "statusCounts", "o", "statusColor", "root", "ReactDOM"]
}
