#!/bin/bash

# Pre-commit hook for tool validation
# Prevents commits with broken tool definitions

echo "üîç Running pre-commit tool validation..."

# Check if tools directory or paths.js changed
TOOLS_CHANGED=$(git diff --cached --name-only | grep -E "(tools/|lib/tools.js)" | wc -l)

if [ "$TOOLS_CHANGED" -gt 0 ]; then
    echo "üìÅ Tool files changed, running validation..."

    # Check for syntax errors in paths.js
    echo "Checking paths.js syntax..."
    if ! node -e "
    try {
      const { toolPaths } = require('./tools/paths.js');
      if (!Array.isArray(toolPaths)) {
        console.error('‚ùå toolPaths is not an array');
        process.exit(1);
      }
      console.log('‚úÖ paths.js syntax valid');
    } catch (error) {
      console.error('‚ùå paths.js syntax error:', error.message);
      process.exit(1);
    }"; then
        echo "‚ùå Syntax validation failed!"
        exit 1
    fi

    # Check for duplicates
    echo "Checking for duplicate tools..."
    if ! node -e "
    const fs = require('fs');
    const pathsContent = fs.readFileSync('./tools/paths.js', 'utf8');
    const paths = pathsContent.match(/'[^']+\.js'/g) || [];
    const seen = new Set();
    const duplicates = [];

    paths.forEach(path => {
      if (seen.has(path)) {
        duplicates.push(path);
      }
      seen.add(path);
    });

    if (duplicates.length > 0) {
      console.error('‚ùå DUPLICATE TOOLS FOUND:');
      duplicates.forEach(d => console.error('  - ' + d));
      process.exit(1);
    } else {
      console.log('‚úÖ No duplicate tools found');
    }"; then
        echo "‚ùå Duplicate validation failed!"
        exit 1
    fi

    # Run tool validation
    echo "Running tool definition validation..."
    if ! node validateTools.js; then
        echo "‚ùå Tool validation failed!"
        echo "Fix tool definitions before committing."
        exit 1
    fi

    echo "‚úÖ All tool validations passed!"
else
    echo "No tool files changed, skipping validation."
fi

echo "‚úÖ Pre-commit validation complete!"