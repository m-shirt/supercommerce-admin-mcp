name: Tool Validation

on:
  pull_request:
    paths:
      - 'tools/**'
      - 'lib/tools.js'
      - 'package.json'
  push:
    branches:
      - master
      - staging
    paths:
      - 'tools/**'

jobs:
  validate-tools:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for duplicate tool paths
        run: |
          echo "Checking for duplicate tool registrations..."
          node -e "
          const fs = require('fs');
          const pathsContent = fs.readFileSync('./tools/paths.js', 'utf8');
          const paths = pathsContent.match(/'[^']+\.js'/g) || [];

          const seen = new Set();
          const duplicates = [];

          paths.forEach(path => {
            if (seen.has(path)) {
              duplicates.push(path);
            }
            seen.add(path);
          });

          if (duplicates.length > 0) {
            console.error('‚ùå DUPLICATE TOOLS FOUND:');
            duplicates.forEach(d => console.error('  - ' + d));
            process.exit(1);
          } else {
            console.log('‚úÖ No duplicate tools found');
          }
          "

      - name: Check for syntax errors in paths.js
        run: |
          echo "Checking for syntax errors in paths.js..."
          node -e "
          try {
            const { toolPaths } = require('./tools/paths.js');
            if (!Array.isArray(toolPaths)) {
              console.error('‚ùå toolPaths is not an array');
              process.exit(1);
            }

            // Check for undefined or empty entries
            const invalidEntries = [];
            toolPaths.forEach((path, index) => {
              if (!path || typeof path !== 'string') {
                invalidEntries.push({ index, value: path });
              }
            });

            if (invalidEntries.length > 0) {
              console.error('‚ùå Invalid entries found in toolPaths:');
              invalidEntries.forEach(e => console.error('  - Index ' + e.index + ': ' + e.value));
              process.exit(1);
            }

            console.log('‚úÖ paths.js syntax is valid');
            console.log('üìä Total tools registered: ' + toolPaths.length);
          } catch (error) {
            console.error('‚ùå Failed to load paths.js:', error.message);
            process.exit(1);
          }
          "

      - name: Validate all tool definitions
        run: |
          echo "Validating all tool definitions..."
          node validateTools.js

      - name: Test tool loading
        run: |
          echo "Testing tool loading mechanism..."
          node -e "
          import('./lib/tools.js').then(module => {
            const { discoverTools } = module;
            discoverTools().then(tools => {
              console.log('‚úÖ Successfully loaded ' + tools.length + ' tools');

              // Check each tool has required properties
              let errors = false;
              tools.forEach(tool => {
                if (!tool.function || !tool.definition) {
                  console.error('‚ùå Tool missing required properties:', tool);
                  errors = true;
                }
              });

              if (errors) process.exit(1);
            }).catch(err => {
              console.error('‚ùå Failed to load tools:', err.message);
              process.exit(1);
            });
          }).catch(err => {
            console.error('‚ùå Import error:', err);
            process.exit(1);
          });
          "

      - name: Build test
        run: |
          echo "Running build test..."
          npm run build

      - name: Test MCP server startup
        run: |
          echo "Testing MCP server startup..."
          timeout 5s npm run start:stdio || true
          echo "‚úÖ MCP server starts without errors"

      - name: Comment PR with validation results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const comment = `## üîç Tool Validation Results

            ‚úÖ All tool validation checks passed:
            - No duplicate tool registrations
            - paths.js syntax is valid
            - All tool definitions are valid
            - Tools load successfully
            - Build passes
            - MCP server starts correctly

            This PR is safe to merge from a tool perspective.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });