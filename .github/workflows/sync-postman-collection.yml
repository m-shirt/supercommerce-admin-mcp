name: Sync Postman Collection to MCP Tools

on:
  # Trigger on push to postman collection files
  push:
    paths:
      - 'postman/collections/*.json'
    branches:
      - master
      - main

  # Trigger on pull requests that modify collection
  pull_request:
    paths:
      - 'postman/collections/*.json'

  # Allow manual trigger
  workflow_dispatch:

  # Schedule daily sync (optional)
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight UTC

jobs:
  sync-tools:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate MCP tools from Postman collection
        id: generate
        run: |
          echo "Running tool generation script..."
          node scripts/generate-tools-from-postman.js > generation-output.txt 2>&1
          cat generation-output.txt

          # Check if any new or updated tools were generated
          if grep -q -E "(Generated.*new MCP tools|Auto-updated.*existing MCP tools)" generation-output.txt; then
            echo "new_tools=true" >> $GITHUB_OUTPUT
            echo "Tools were generated or updated"

            # Extract tool counts for README update
            NEW_COUNT=$(grep -o "Generated [0-9]* new MCP tools" generation-output.txt | grep -o "[0-9]*" || echo "0")
            UPDATED_COUNT=$(grep -o "Auto-updated [0-9]* existing MCP tools" generation-output.txt | grep -o "[0-9]*" || echo "0")
            echo "new_count=$NEW_COUNT" >> $GITHUB_OUTPUT
            echo "updated_count=$UPDATED_COUNT" >> $GITHUB_OUTPUT
          else
            echo "new_tools=false" >> $GITHUB_OUTPUT
            echo "No tools generated or updated"
          fi

      - name: Update README with latest tool information
        if: steps.generate.outputs.new_tools == 'true'
        run: |
          echo "Updating README with latest tool counts and sync information..."

          # Get total tool count from docs
          TOTAL_TOOLS=$(grep -o "all [0-9]* MCP tools" docs/TOOLS.md | grep -o "[0-9]*" || echo "189")
          LAST_SYNC=$(date -u +"%Y-%m-%d %H:%M:%S UTC")

          # Update tool count in README
          sed -i "s/144+ tools/${TOTAL_TOOLS}+ tools/g" README.md
          sed -i "s/\*\*144+ tools\*\*/\*\*${TOTAL_TOOLS}+ tools\*\*/g" README.md

          # Update last sync timestamp in README
          if grep -q "Last sync:" README.md; then
            sed -i "s/Last sync:.*/Last sync: $LAST_SYNC/" README.md
          else
            echo "Last sync: $LAST_SYNC" >> README.md
          fi

          echo "README updated with $TOTAL_TOOLS total tools"

      - name: Validate generated tools
        if: steps.generate.outputs.new_tools == 'true'
        run: |
          echo "Validating all tools..."
          node validateTools.js || true  # Continue even if validation fails

      - name: Run tests
        if: steps.generate.outputs.new_tools == 'true'
        run: |
          echo "Running tests on new tools..."
          npm test || true  # Continue even if tests fail (optional)

      - name: Verify documentation generation
        if: steps.generate.outputs.new_tools == 'true'
        run: |
          echo "Verifying documentation files were generated correctly..."

          # Check if docs/TOOLS.md exists and has content
          if [ -f "docs/TOOLS.md" ]; then
            TOOL_COUNT_DOCS=$(grep -o "all [0-9]* MCP tools" docs/TOOLS.md | grep -o "[0-9]*" || echo "0")
            echo "docs/TOOLS.md contains $TOOL_COUNT_DOCS tools"
          else
            echo "‚ùå docs/TOOLS.md not found!"
            exit 1
          fi

          # Check if CHANGELOG.md was updated
          if [ -f "CHANGELOG.md" ]; then
            RECENT_UPDATE=$(grep -c "Automated Update.*$(date +%Y-%m-%d)" CHANGELOG.md || echo "0")
            if [ "$RECENT_UPDATE" -gt 0 ]; then
              echo "‚úÖ CHANGELOG.md was updated with today's changes"
            else
              echo "‚ö†Ô∏è  CHANGELOG.md may not have today's updates"
            fi
          else
            echo "‚ùå CHANGELOG.md not found!"
          fi

      - name: Test build to ensure no syntax errors
        if: steps.generate.outputs.new_tools == 'true'
        run: |
          echo "Testing build to ensure generated tools are valid..."
          npm run build

      - name: Commit and Push Changes
        if: steps.generate.outputs.new_tools == 'true' && github.event_name != 'pull_request'
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          git add .

          # Build detailed commit message
          NEW_COUNT="${{ steps.generate.outputs.new_count }}"
          UPDATED_COUNT="${{ steps.generate.outputs.updated_count }}"
          TOTAL_TOOLS=$(grep -o "all [0-9]* MCP tools" docs/TOOLS.md | grep -o "[0-9]*" || echo "189")

          # Read changelog summary if exists
          CHANGELOG_SUMMARY=""
          if [ -f "CHANGELOG.md" ]; then
            CHANGELOG_SUMMARY=$(grep -A 3 "## \[Automated Update\]" CHANGELOG.md | head -4 || echo "")
          fi

          COMMIT_MSG="feat: sync MCP tools with Postman collection

üìä Changes Summary:
‚Ä¢ New tools: $NEW_COUNT
‚Ä¢ Updated tools: $UPDATED_COUNT
‚Ä¢ Total tools: $TOTAL_TOOLS

üìö Documentation Updated:
‚Ä¢ README.md - Updated tool counts and sync timestamp
‚Ä¢ docs/TOOLS.md - Regenerated with business model categories
‚Ä¢ CHANGELOG.md - Added automated update entry

$CHANGELOG_SUMMARY

ü§ñ Generated by GitHub Actions
üîó Triggered by: ${{ github.event_name }}
üìÖ Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"

          git commit -m "$COMMIT_MSG" || echo "No changes to commit"
          git push origin master || git push origin main || echo "No changes to push"

      - name: Notify success
        if: steps.generate.outputs.new_tools == 'true'
        run: |
          echo "‚úÖ Successfully synchronized MCP tools with Postman collection"
          echo "Changes have been committed and pushed to master"